OTA workflow

from nico: 
When a terms (a document of a service) needs to be created on the ToS;DR side, you make a call to the REST federated API (which is not implemented yet, I'm currently working on the RFC) to see if the service already exists on a collection and if this specific terms also already exist. 
If the service and the terms exist, there is no need to create something, you can just get the document if needed.
If the service exists but not the terms, you can add the terms to the service declaration by creating opening a pull request to the GitHub repository of the collection where the service is located.
If the service and the terms does not exists, you can create a declaration for this service and this terms in your ToS;DR collection.

- retrieve service
-- query federated collections api - GET /services/search?name=facebook
-- pick from results (prioritize pga collection)

QUESTION 1: 
I have a couple of questions about how to handle situations where certain terms exist in one collection, but not another: 
-- By way of example, pga's Facebook declaration may contain ["Terms of Service", "Privacy Policy", "Developer Terms", "Trackers Policy", "Data Processor Agreement"], but contrib's Facebook declaration contains ["Terms of Service", "Cookies Policy"]
---> If I were specifically searching for Facebook's Cookies Policy, I'd need to iterate through all service results in the federated collections API and verify their termsTypes fields - is this correct?
---> Would it be a misuse of the tool to obtain documents for the same service from different collections? For example, obtaining the "Cookies Policy" from contrib, but the "Privacy Policy" from pga
---> This seems fairly resource-intensive - could we not store a field on our documents to link directly to the document in the service declaration, as it's indicated by the API?
----> Also, store a field on our services to link directly to the declaration in the collection?

-- federated collections api to retrieve service, collection metadata api to retrive document/terms -- correct workflow? 

- retrieve document for service
-- if the document exists in the termsTypes field of the service result object
---> query the collection metadata api using the url returned for the service
-- if the document does not exist
---> add the document to the service by opening a PR to the GitHub repo of the service's collection

QUESTION 2 - general/philosophical:
I don't think we're going to be able to get rid of the services table, nor the documents table. First of all, the services table has a special relationship with points, where each service has many points. This relationship needs to be maintained, and wouldn't be if we were to just replace our services with OTA's data. We could: reduce the schema so that it only reflects OTA metadata.

QUESTION 3:
---> PATCH and DELETE - are these available? How are they used? Will users be able to perform PATCH and DELETE requests to collections?

summary of notes from meeting w OTA - july 25, 2023

OTA has completed milestone 1 and sent notice to nlnet. They are currently working on milestone 2, for which there is the open RFC, and they expect completion of the federated collections API for September. 

We discussed workflow and user stories, from the Phoenix perspective.

Here is my idea about the workflow:
- user story 1: retrieving a document for a service 
-- we seek the service in the federated collections api and select the service based on the terms type, i.e., the results a filtered by both service and terms type 
--- for example, say we are seeking the cookies policy of facebook. we query the federated collections api like so: GET /services/search?name=facebook&termsType=cookies%20policy
--- we receive a result like this: 
 {
  "results": [
    {
      "collection": "contrib",
      "service": {
        "id": "facebook",
        "name": "Facebook",
        "url": "http://162.162.162.162/api/v1/service/facebook",
        "termsTypes": ["Terms of Service", "Cookies Policy"]
      }
    }
  ],
  "failures": []
}
-- we can then go looking for the document markdown text and other details (different milestone)

- user story 2: simply retrieving a service to see which documents are available for annotation
-- we seek the service in the federated collections api
--- GET /services/search?name=facebook
--- which returns:
 {
  "results": [
    {
      "collection": "pga",
      "service": {
        "id": "facebook",
        "name": "Facebook",
        "url": "http://173.173.173.173/api/v1/service/facebook",
        "termsTypes": [ "Terms of Service", "Privacy Policy", "Developer Terms", "Trackers Policy", "Data Processor Agreement"]
      }
    },
    {
      "collection": "contrib",
      "service": {
        "id": "facebook",
        "name": "Facebook",
        "url": "http://162.162.162.162/api/v1/service/facebook",
        "termsTypes": ["Terms of Service", "Cookies Policy"]
      }
    }
  ],
  "failures": []
}
-- we prioritize documents from pga due to the high quality of the data, but we also include documents from other collections if those documents have not been tracked by pga, for example, contrib's cookie policy, so that the Phoenix user sees the following documents available for annotation: Terms of Service (from pga), Privacy Policy (from pga), Developer Terms (from pga), Trackers Policy (from pga), Data Processor Agreement (from pga), Cookies Policy (from contrib)
--- we must decide whether we disclose to users that these documents come from different collections
--- documents unavailable in pga are prioritized in order of appearance in the result set. for example: if a different collection also has the Cookies Policy but comes after contrib in the result set, this Cookies Policy would not be included among the documents that Phoenix users can browse.
---- i am open to different criteria for determining priority. for example, if OTA has some knowledge about the quality of the data from other collections, we can prioritize based on quality as opposed to order. 

- user story 3: creating a service and a terms declaration if it does not exist in the other collections
-- we create this service and terms declaration in the tosdr collection and approve the pr immediately using a bot, that way our users can retrieve the text of the document more immediately, which is what they are used to

- user story 4: updating a service or terms declaration
-- this will only be possible from the tosdr collection

- user story 5: removing a service or terms declaration
-- this will only be possible from the tosdr collection





